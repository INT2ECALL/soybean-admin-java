<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.soybean</groupId>
        <artifactId>soybean-framework</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../../soybean-framework/pom.xml</relativePath>
    </parent>
    <artifactId>soybean-demo</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>soybean-demo</name>
    <packaging>jar</packaging>
    <description>demo</description>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>

        <dependency>
            <groupId>com.soybean</groupId>
            <artifactId>soybean-db-start</artifactId>
        </dependency>
        <dependency>
            <groupId>com.soybean</groupId>
            <artifactId>soybean-common-start</artifactId>
        </dependency>
        <dependency>
            <groupId>com.soybean</groupId>
            <artifactId>soybean-oauth2-start</artifactId>
        </dependency>
        <dependency>
            <groupId>com.soybean</groupId>
            <artifactId>soybean-xxl-job-start</artifactId>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.shalousun</groupId>
                <artifactId>smart-doc-maven-plugin</artifactId>
                <version>2.4.5</version>
                <configuration>
                    <!--指定生成文档的使用的配置文件,配置文件放在自己的项目中-->
                    <configFile>./src/main/resources/smart-doc.json</configFile>
                    <!--指定项目名称，推荐使用动态参数，例如${project.description}-->
                    <!--如果smart-doc.json中和此处都未设置projectName，2.3.4开始，插件自动采用pom中的projectName作为设置-->
                    <projectName>${project.artifactId}</projectName>
                    <!--smart-doc实现自动分析依赖树加载第三方依赖的源码，如果一些框架依赖库加载不到导致报错，这时请使用excludes排除掉-->
                    <excludes>
                        <!--格式为：groupId:artifactId;参考如下-->
                        <!--也可以支持正则式如：com.alibaba:.* -->
                        <exclude>com.alibaba:fastjson</exclude>
                    </excludes>
                    <!--includes配置用于配置加载外部依赖源码,配置后插件会按照配置项加载外部源代码而不是自动加载所有，因此使用时需要注意-->
                    <!--smart-doc能自动分析依赖树加载所有依赖源码，原则上会影响文档构建效率，因此你可以使用includes来让插件加载你配置的组件-->
                    <includes>
                        <!--格式为：groupId:artifactId;参考如下-->
                        <!--也可以支持正则式如：com.alibaba:.* -->
                        <include>com.alibaba:fastjson</include>
                    </includes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <!--认证配置,用于私有registry认证-->
<!--                    <authConfig>-->
<!--                        <username></username>-->
<!--                        <password></password>-->
<!--                    </authConfig>-->
                    <!--                    Docker 远程管理地址-->
                    <dockerHost>${docker.dockerHost}</dockerHost>
<!--                    <certPath>/docker-ca</certPath>-->
                    <!--                    Docker 推送镜像仓库地址-->
                    <!--                    <pullRegistry>${docker.pullRegistry}</pullRegistry>-->
                    <!--                    <pushRegistry>${docker.pushRegistry}</pushRegistry>-->
                    <images>
                        <image>
                            <!--由于推送到私有镜像仓库，镜像名需要添加仓库地址-->
                            <name>${project.name}:2022-07-28-001</name>
                            <!--定义镜像构建行为-->
                            <build>
                                <!--定义基础镜像-->
                                <from>${docker.baseImage}</from>
                                <args>
                                    <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                                </args>
                                <!--定义哪些文件拷贝到容器中-->
                                <assembly>
                                    <!--定义拷贝到容器的目录-->
                                    <targetDir>/</targetDir>
                                    <!--只拷贝生成的jar包-->
                                    <descriptorRef>artifact</descriptorRef>
                                </assembly>
                                <env>
                                    <TZ>Asia/Shanghai</TZ>
                                    <JAVA_OPTS>${docker.java.opts}</JAVA_OPTS>
                                </env>
                                <runCmds>
                                    <run>ln -snf /usr/share/zoneinfo/$TZ /etc/localtime</run>
                                    <run>echo $TZ > /etc/timezone</run>
                                </runCmds>
                                <!--定义容器启动命令-->
                                <entryPoint>
                                    ["sh","-c","java $JAVA_OPTS ${docker.java.security.egd} -jar /${project.build.finalName}.jar"]
                                </entryPoint>
                                <!--定义维护者-->
                                <maintainer>${docker.maintainer}</maintainer>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>

            <!--            <plugin>-->
            <!--                <groupId>com.spotify</groupId>-->
            <!--                <artifactId>docker-maven-plugin</artifactId>-->
            <!--                <configuration>-->
            <!--                    <imageName>${project.artifactId}</imageName>-->
            <!--                    <imageTags>-->
            <!--                        <imageTag>latest</imageTag>-->
            <!--                    </imageTags>-->
            <!--                    <forceTags>true</forceTags>-->
            <!--                    <baseImage>${docker.baseImage}</baseImage>-->
            <!--                    <volumes>${docker.volumes}</volumes>-->
            <!--                    <dockerHost>${docker.dockerHost}</dockerHost>-->
            <!--                    <env>-->
            <!--                        <JAVA_OPTS>${docker.java.opts}</JAVA_OPTS>-->
            <!--                    </env>-->
            <!--                    <entryPoint>["sh","-c","java $JAVA_OPTS ${docker.java.security.egd} -jar /${project.build.finalName}.jar"]</entryPoint>-->
            <!--                    <resources>-->
            <!--                        <resource>-->
            <!--                            <targetPath>/</targetPath>-->
            <!--                            <directory>${project.build.directory}</directory>-->
            <!--                            <include>${project.build.finalName}.jar</include>-->
            <!--                        </resource>-->
            <!--                    </resources>-->
            <!--                </configuration>-->
            <!--            </plugin>-->
        </plugins>
    </build>

</project>
